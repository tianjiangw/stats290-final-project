#' @return a table of historical weather of nearby stations(PWS) based on selected city
?nearby_pws_city
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
pws_id_selected[1:3,]
#' @return a map of historical weather for selected PWS list or city
?weather_map
pws_id_selected <- nearby_pws_city(city_name = "Belmont",check_date="2018-05-05")
weather_map(df=pws_id_selected)
pws_id_selected
#create temperature map
weather_map <- function(df=pws_id_selected) {
#create contour line
surface <- with(df, interp(lon, lat, temp, linear = FALSE))
srfc <- expand.grid(lon = surface$x, lat = surface$y)
srfc$temp <- as.vector(surface$z)
tconts <- geom_contour(aes(x = lon, y = lat, z = temp), data = srfc, na.rm = TRUE)
# getting the map
wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
maptype =  "terrain-background", scale = 2)
#wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
#                  maptype =  "terrain-labels", scale = 2)
# plotting the map with some points on it
ggmap(wu_map) +
geom_point(data = df, aes(x = df$lon, y = df$lat, fill = "blue", alpha = 0.8), size = 3, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)+  geom_text(data = df, aes(x = df$lon, y = df$lat, label = paste(df$temp,"Â°C")), size = 3, vjust = 0, hjust = -0.5) +
labs(title = paste0("Bay Area Weather - ",unique(df$location_city)," (",unique(df$date),")"), x = "Lon", y = "Lat", color = "Tempature\n", size = 2,fill = "blue") +
#stat_density2d(data=df,aes(x=df$lon,y=df$lat,z=df$temp))
tconts ##add contour line
}
weather_map(df = pws_id_selected)
library(akima)
weather_map(df = pws_id_selected)
library(ggplot2)
library(ggmap)
weather_map(df = pws_id_selected)
library(stat290.finalproject)
?weather_map
pws_id_selected <- nearby_pws_city(city_name = "Belmont",check_date="2018-05-05")
weather_map(df=pws_id_selected)
#' @return a map of historical weather for selected PWS list or city
library(ggplot2)
library(ggmap)
library(akima)
?weather_map
pws_id_selected <- nearby_pws_city(city_name = "Belmont",check_date="2018-05-05")
weather_map(df=pws_id_selected)
#' @return run package
library(stat290.finalproject)
#' @return a table of historical weather for selected city
?history_weather
c="Alameda"
d1="2018-06-01"
d2="2018-12-31"
history_weather_tbl=history_weather(city_name = c,start_date=d1,end_date=d2)
history_weather_tbl[1:3,]
#' @return a table of historical weather of nearby stations(PWS) based on selected city
?nearby_pws_city
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
pws_id_selected[1:3,]
#' @return a table of historical weather of nearby stations(PWS) based on location (lon,lat and distance(meter))
?nearby_pws_coordinates
l1=-122.27999878
l2=37.52000046
dis=4000
d="2018-05-05"
pws_id_selected=nearby_pws_coordinates(lon=l1,lat=l2,distance = dis,data=pws,check_date = d)
pws_id_selected[1:3,]
#' @return a map of historical weather for selected PWS list or city
library(ggplot2)
library(ggmap)
library(akima)
?weather_map
pws_id_selected <- nearby_pws_city(city_name = "Belmont",check_date="2018-05-05")
weather_map(df=pws_id_selected)
#' @return a chart of historical daily tempature with mean, max and min values
?history_temp_daily
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_temp_daily(df=history_weather_tbl)
#' @return a chart of historical month tempature with mean, max and min values
?history_temp_month
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_temp_month(df=history_weather_tbl)
#' @return a chart of historical daily humidity with mean, max and min values
?history_humidity_daily
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_humidity_daily(df=history_weather_tbl)
#' @return a chart of historical monthly humidity with mean, max and min values
?history_humidity_month
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_humidity_month(df=history_weather_tbl)
#' @return a wind rose
?weather_windrose
df=history_weather(city_name = "Alameda",start_date="2018-06-01",end_date="2018-12-31")
weather_windrose(data = df, spd = "wind_speed", dir = "wind_dir_degrees")
#' @return shiny UI
?weather_ui
library(shiny)
runApp('shiny_code.R')
#' @return shiny UI
?weather_ui
library(shiny)
shinyApp(ui = weather_ui, server = server)
runApp('shiny_code.R')
system.file(package = "stat290.finalproject")
setwd("~/R/win-library/3.5/stat290.finalproject")
#' @return shiny UI
?weather_ui
library(shiny)
runApp('shiny_code.R')
paths <- readRDS("~/R/win-library/3.5/stat290.finalproject/help/paths.rds")
setwd("~/GitHub/stats290-final-project/stat290.finalproject")
#' @return shiny UI
?weather_ui
library(shiny)
runApp('shiny_code.R')
#' @return shiny UI
?weather_ui
library(shiny)
runApp('~/R/win-library/3.5/stat290.finalproject/shiny_code.R')
R -e "shiny::runApp('~/shinyapp')"
run runApp('shiny_code.R')
Run runApp('shiny_code.R')
#' @return shiny UI
?weather_ui
library(shiny)
runApp('shiny_code.R')
runApp('shiny_code.R')
appDir <- system.file("shiny-examples", example, package = "mypackage")
shiny::runApp(appDir, display.mode = "normal")
weather_ui <- system.file("shiny_code", package = "stat290.finalpackage")
shiny::runApp(weather_ui, display.mode = "normal")
system.file("shiny_code", package = "stat290.finalpackage")
shiny::runApp(weather_ui, display.mode = "normal")
system.file("shiny_code", package = "stat290.finalpackage")
system.file("shiny_code.R", package = "stat290.finalpackage")
system.file("shiny_code.R", example,package = "stat290.finalpackage")
runExample("myapp")
runExample("myapp")
library(stat290.finalproject)
stat290.finalproject::runExample()
library(stat290.finalproject)
stat290.finalproject::runExample()
system.file("shiny-examples", "myapp", package = "stat290.finalproject")
library(stat290.finalproject)
system.file("shiny-examples", "myapp", package = "stat290.finalproject")
stat290.finalproject::runExample()
stat290.finalproject::runExample()
stat290.finalproject::runExample()
library(stat290.finalproject)
stat290.finalproject::runExample()
library(gridExtra)
stat290.finalproject::runExample()
library(stat290.finalproject)
stat290.finalproject::runExample()
stat290.finalproject::runExample()
stat290.finalproject::runExample()
library(stat290.finalproject)
stat290.finalproject::runExample()
library(stat290.finalproject)
stat290.finalproject::runExample()
library(stat290.finalproject)
library(gridExtra)
library(stat290.finalproject)
stat290.finalproject::runExample()
library(shiny)
stat290.finalproject::runExample()
library(ggplot2)
stat290.finalproject::runExample()
library(ggmap)
stat290.finalproject::runExample()
library(stat290.finalproject)
stat290.finalproject::runExample()
library(stat290.finalproject)
stat290.finalproject::runWeatherUI()
#' @return run package
library(stat290.finalproject)
runWeatherUI()
#' @return run package
library(stat290.finalproject)
runWeatherUI()
#' @return run package
library(stat290.finalproject)
runWeatherUI()
#' @return run package
library(stat290.finalproject)
runWeatherUI()
postMessage('disconnected', '*')
#' @return run package
library(stat290.finalproject)
>runWeatherUI()
#' @return run package
library(stat290.finalproject)
runWeatherUI()
#' @return run package
library(stat290.finalproject)
runWeatherUI()
#' @return run package
library(stat290.finalproject)
#runWeatherUI()
#' @return shiny UI
#' run shiny UI as below:
runWeatherUI()
#' @return shiny UI
#' run shiny UI as below:
runWeatherUI()
library(stat290.finalproject)
#' @return a wind rose
#' ?weather_windrose
df=history_weather(city_name = "Alameda",start_date="2018-06-01",end_date="2018-12-31")
weather_windrose(data = df, spd = "wind_speed", dir = "wind_dir_degrees")
#' @return shiny UI
#' run shiny UI as below:
runWeatherUI()
#' @return run package
library(stat290.finalproject)
#' run shiny UI as below:
#' runWeatherUI()
#' @return a table of historical weather for selected city
#' ?history_weather
c="Alameda"
d1="2018-06-01"
d2="2018-12-31"
history_weather_tbl=history_weather(city_name = c,start_date=d1,end_date=d2)
history_weather_tbl[1:3,]
#' @return a table of historical weather of nearby stations(PWS) based on selected city
#' ?nearby_pws_city
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
pws_id_selected[1:3,]
#' @return a table of historical weather of nearby stations(PWS) based on location (lon,lat and distance(meter))
#' ?nearby_pws_coordinates
l1=-122.27999878
l2=37.52000046
dis=4000
d="2018-05-05"
pws_id_selected=nearby_pws_coordinates(lon=l1,lat=l2,distance = dis,data=pws,check_date = d)
pws_id_selected[1:3,]
#' @return a map of historical weather for selected PWS list or city
#' ?weather_map
library(ggplot2)
library(ggmap)
library(akima)
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
weather_map(df=pws_id_selected)
pws_id_selected <- nearby_pws_city(city_name = "Belmont",check_date="2018-05-05")
weather_map(df=pws_id_selected)
#' @return a chart of historical daily tempature with mean, max and min values
#' ?history_temp_daily
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_temp_daily(df=history_weather_tbl)
#' @return a chart of historical month tempature with mean, max and min values
#' ?history_temp_month
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_temp_month(df=history_weather_tbl)
#' @return a chart of historical daily humidity with mean, max and min values
#' ?history_humidity_daily
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_humidity_daily(df=history_weather_tbl)
#' @return a chart of historical monthly humidity with mean, max and min values
#' ?history_humidity_month
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_humidity_month(df=history_weather_tbl)
#' @return a wind rose
#' ?weather_windrose
df=history_weather(city_name = "Alameda",start_date="2018-06-01",end_date="2018-12-31")
weather_windrose(data = df, spd = "wind_speed", dir = "wind_dir_degrees")
#' @return shiny UI
#' run shiny UI as below:
runWeatherUI()
runWeatherUI()
library(ggmap)
runWeatherUI()
#'run shiny WeatherUI
#' @export
#' @importFrom shiny fluidPage tabsetPanel tabPanel h3 sidebarLayout sidebarPanel helpText selectInput textInput numericInput actionButton mainPanel plotOutput tableOutput reactive renderTable renderPlot observeEvent shinyApp runApp
#' @importFrom gridExtra grid.arrange
#' @importFrom ggplot2 ggplot geom_bar aes guides geom_text labs geom_point geom_contour ggtitle geom_line scale_x_discrete scale_y_continuous scale_fill_manual coord_flip theme element_blank ylim
#' @importFrom utils head packageVersion read.csv write.csv
#' @importFrom graphics plot
#' @importFrom akima interp
#' @importFrom ggmap ggmap get_map get_stamenmap
#'
#' @examples
#' \dontrun{
#' stat290.finalproject::runWeatherUI()
#' }
#'
#'
runWeatherUI <- function() {
appDir <- system.file("shiny-examples", "myapp", package = "stat290.finalproject")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `stat290.finalproject`.", call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
runWeatherUI()
#' Shiny UI Interface
#'
#' @description create user interface for historical weather query
#' @export
#'
#' @importFrom shiny fluidPage tabsetPanel tabPanel h3 sidebarLayout sidebarPanel helpText selectInput textInput numericInput actionButton mainPanel plotOutput tableOutput reactive renderTable renderPlot observeEvent shinyApp runApp
#' @importFrom ggplot2 ggplot geom_bar aes guides geom_text labs geom_point geom_contour ggtitle geom_line scale_x_discrete scale_y_continuous scale_fill_manual coord_flip theme element_blank ylim
#' @examples
#'
#'\dontrun{
#' library(shiny)
#' runApp('shiny_code.R')
#'}
#'
#' @keywords Shiny Interface
#'
#'
#location_city<-readRDS("location_city.rda")
#weather_pws<-readRDS("weather_pws.rda")
#pws<-readRDS("pws.rda")
#source("get_map.R")
#source("distm_city.R")
#source("wind_rose_plot.R")
#city_lst=list(unique(location_city$city))
ui <- fluidPage(
tabsetPanel(
tabPanel(h3("Bay Area Weather by City"),
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("input city and date" ),
selectInput("city", "city_name:", c('Alameda','Atherton','Belmont','Brisbane','Burlingame',
'Daly City','Half Moon Bay','Hayward','Menlo Park','Millbrae',
'Milpitas','Oakland','Pacifica','Palo Alto','Portola Valley',
'Redwood City','San Bruno','San Carlos','San Francisco',
'San Jose','San Mateo','Santa Clara','South San Francisco')),
textInput("Date","check_date(2018 only,yyyy-mm-dd)",value = "2018-04-01"),
numericInput(inputId = "nrows", label = "head_rows", value = 3),
actionButton(inputId = "save", label = "Save"),
actionButton(inputId = "reload", label = "reload"),
actionButton(inputId = "run", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot"),
tableOutput(outputId = "table")
)
)
),
tabPanel(h3("Bay Area Weather by Selected Location"), fluid = TRUE,
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("input location, range(meter) and date(yyyy-mm-dd)" ),
numericInput(inputId = "lon", label = "Longitude", value=-122.27999878),
numericInput(inputId = "lat", label = "Latitude", value=37.52000046),
numericInput(inputId = "distance", label = "Distance(by meter)", value=4000),
textInput("Date2","check_date(2018 only,yyyy-mm-dd)",value = "2018-04-01"),
numericInput(inputId = "nrows2", label = "head_rows", value = 3),
actionButton(inputId = "save2", label = "Save"),
actionButton(inputId = "run2", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot2"),
tableOutput(outputId = "table2")
)
)
),
tabPanel(h3("Historical Weather"), fluid = TRUE,
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("Input city and date range(yyyy-mm-dd)" ),
selectInput("city3", "city_name:", c('Alameda','Atherton','Belmont','Brisbane','Burlingame',
'Daly City','Half Moon Bay','Hayward','Menlo Park','Millbrae',
'Milpitas','Oakland','Pacifica','Palo Alto','Portola Valley',
'Redwood City','San Bruno','San Carlos','San Francisco',
'San Jose','San Mateo','Santa Clara','South San Francisco')),
textInput("start_date3","start_date(2018 only,yyyy-mm-dd)",value = "2018-01-01"),
textInput("end_date3","end_date(2018 only,yyyy-mm-dd)",value = "2018-12-31"),
numericInput(inputId = "nrows3", label = "head_rows", value = 3),
actionButton(inputId = "save3", label = "Save"),
actionButton(inputId = "run3", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot3"),
tableOutput(outputId = "table3")
)
)
)
)
)
#' Shiny server
#'
#' @description create user interface for historical weather query
#' @export
#'
#' @importFrom shiny fluidPage tabsetPanel tabPanel h3 sidebarLayout sidebarPanel helpText selectInput textInput numericInput actionButton mainPanel plotOutput tableOutput reactive renderTable renderPlot observeEvent shinyApp runApp
#' @importFrom gridExtra grid.arrange
#' @importFrom ggplot2 ggplot geom_bar aes guides geom_text labs geom_point geom_contour ggtitle geom_line scale_x_discrete scale_y_continuous scale_fill_manual coord_flip theme element_blank ylim
#' @importFrom utils head packageVersion read.csv write.csv
#' @importFrom graphics plot
#' @examples
#'
#'\dontrun{
#' library(shiny)
#' runApp('shiny_code.R')
#'}
#'
#' @keywords Shiny Interface
server <- function(input, output, session) {
#tab1
#data<- reactive(if (!input$reload|input$run|input$save) {x= nearby_pws_city(city_name=input$city,check_date=input$Date)} else x=read.csv("data.csv"))
data<- reactive(if (!input$reload|input$run) {
x= nearby_pws_city(city_name=input$city,check_date=input$Date)
}
else {
#session$reload()
x= read.csv("data.csv")
})
#eventReactive(if (input$reload & input$run) {session$reload()})
df <- reactive(head(data(), n = input$nrows))
output$plot <- renderPlot(expr = {
p1=plot(x = weather_map(data()))
p2=plot(x = weather_windrose(data()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table <- renderTable(expr = {
df()
})
#tab2
data2 <- reactive(x= nearby_pws_coordinates(lon=input$lon,lat=input$lat,distance=input$distance,check_date=input$Date2,data=pws))
df2 <- reactive(head(data2(), n = input$nrows2))
output$plot2 <- renderPlot(expr = {
p1=plot(x = weather_map(data2()))
p2=plot(x = weather_windrose(data2()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table2 <- renderTable(expr = {
df2()
})
#tab3
data3 <- reactive(x= history_weather(city_name =input$city3,start_date=input$start_date3,end_date=input$end_date3))
df3 <- reactive(head(data3(), n = input$nrows3))
output$plot3 <- renderPlot(expr = {
p1=plot(x = history_temp_daily(data3()))
p2=plot(x = history_temp_month(data3()))
p3=plot(x = history_humidity_daily(data3()))
p4=plot(x = history_humidity_month(data3()))
grid.arrange(p1,p2,p3,p4, nrow=2,ncol=2,heights = c(3,3))
})
output$table3 <- renderTable(expr = {
df3()
})
## Add logic so that when the "save" button is pressed, the data
## is saved to a CSV file called "data.csv" in the current
## directory.
observeEvent(eventExpr = input$save, handlerExpr = {
#write.csv(df(), file = "data.csv")
write.csv(data(), file = "data.csv")
})
observeEvent(eventExpr = input$save2, handlerExpr = {
write.csv(data2(), file = "data2.csv")
})
observeEvent(eventExpr = input$save3, handlerExpr = {
write.csv(data3(), file = "data3.csv")
})
#  observeEvent(eventExpr = input$reload, handlerExpr = {
#    data=read.csv("data.csv")
#    print("REFRESHING CSV!")
#    p1=plot(x = weather_map(data()))
#    p2=plot(x = weather_windrose(data()))
#  })
}
runWeatherUI()
library(stat290.finalproject)
#' @return shiny UI
#' run shiny UI as below:
runWeatherUI()
#' @return shiny UI
#' run shiny UI as below:
library(ggplot2)
library(gridExtra)
library(ggmap)
runWeatherUI()
library(stat290.finalproject)
library(stat290.finalproject)
runWeatherUI()
library(stat290.finalproject)
runWeatherUI()
library(gridExtra)
runWeatherUI()
library(ggplot2)
library(ggplot2)
runWeatherUI()
library(ggmap)
runWeatherUI()
