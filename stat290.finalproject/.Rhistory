plotOutput(outputId = "plot"),
tableOutput(outputId = "table")
)
)
),
tabPanel(h3("Bay Area Weather by Selected Location"), fluid = TRUE,
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("input location, range(meter) and date(yyyy-mm-dd)" ),
numericInput(inputId = "lon", label = "Longitude", value=-122.27999878),
numericInput(inputId = "lat", label = "Latitude", value=37.52000046),
numericInput(inputId = "distance", label = "Distance(by meter)", value=4000),
textInput("Date2","check_date(2018 only,yyyy-mm-dd)",value = "2018-04-01"),
numericInput(inputId = "nrows2", label = "head_rows", value = 3),
actionButton(inputId = "save2", label = "Save"),
actionButton(inputId = "run2", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot2"),
tableOutput(outputId = "table2")
)
)
),
tabPanel(h3("Historical Weather"), fluid = TRUE,
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("Input city and date range(yyyy-mm-dd)" ),
selectInput("city3", "city_name:", c('Alameda','Atherton','Belmont','Brisbane','Burlingame',
'Daly City','Half Moon Bay','Hayward','Menlo Park','Millbrae',
'Milpitas','Oakland','Pacifica','Palo Alto','Portola Valley',
'Redwood City','San Bruno','San Carlos','San Francisco',
'San Jose','San Mateo','Santa Clara','South San Francisco')),
textInput("start_date3","start_date(2018 only,yyyy-mm-dd)",value = "2018-01-01"),
textInput("end_date3","end_date(2018 only,yyyy-mm-dd)",value = "2018-12-31"),
numericInput(inputId = "nrows3", label = "head_rows", value = 3),
actionButton(inputId = "save3", label = "Save"),
actionButton(inputId = "run3", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot3"),
tableOutput(outputId = "table3")
)
)
)
)
)
server <- function(input, output, session) {
#tab1
#data<- reactive(if (!input$reload|input$run|input$save) {x= nearby_pws_city(city_name=input$city,check_date=input$Date)} else x=read.csv("data.csv"))
data<- reactive(if (!input$reload|input$run) {
x= nearby_pws_city(city_name=input$city,check_date=input$Date)
}
else {
session$reload()
x= read.csv("data.csv")
})
#eventReactive(if (input$reload & input$run) {session$reload()})
df <- reactive(head(data(), n = input$nrows))
output$plot <- renderPlot(expr = {
p1=plot(x = weather_map(data()))
p2=plot(x = weather_windrose(data()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table <- renderTable(expr = {
df()
})
#tab2
data2 <- reactive(x= nearby_pws_coordinates(lon=input$lon,lat=input$lat,distance=input$distance,check_date=input$Date2,data=pws))
df2 <- reactive(head(data2(), n = input$nrows2))
output$plot2 <- renderPlot(expr = {
p1=plot(x = weather_map(data2()))
p2=plot(x = weather_windrose(data2()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table2 <- renderTable(expr = {
df2()
})
#tab3
data3 <- reactive(x= history_weather(city_name =input$city3,start_date=input$start_date3,end_date=input$end_date3))
df3 <- reactive(head(data3(), n = input$nrows3))
output$plot3 <- renderPlot(expr = {
p1=plot(x = history_temp_daily(data3()))
p2=plot(x = history_temp_month(data3()))
p3=plot(x = history_humidity_daily(data3()))
p4=plot(x = history_humidity_month(data3()))
grid.arrange(p1,p2,p3,p4, nrow=2,ncol=2,heights = c(3,3))
})
output$table3 <- renderTable(expr = {
df3()
})
## Add logic so that when the "save" button is pressed, the data
## is saved to a CSV file called "data.csv" in the current
## directory.
observeEvent(eventExpr = input$save, handlerExpr = {
#write.csv(df(), file = "data.csv")
write.csv(data(), file = "data.csv")
})
observeEvent(eventExpr = input$save2, handlerExpr = {
write.csv(data2(), file = "data2.csv")
})
observeEvent(eventExpr = input$save3, handlerExpr = {
write.csv(data3(), file = "data3.csv")
})
#  observeEvent(eventExpr = input$reload, handlerExpr = {
#    data=read.csv("data.csv")
#    print("REFRESHING CSV!")
#    p1=plot(x = weather_map(data()))
#    p2=plot(x = weather_windrose(data()))
#  })
}
shinyApp(ui = ui, server = server)
library(shiny)
library(gridExtra)
#location_city<-readRDS("location_city.rda")
#weather_pws<-readRDS("weather_pws.rda")
#pws<-readRDS("pws.rda")
source("get_map.R")
source("distm_function.R")
source("wind_rose_plot.R")
#city_lst=list(unique(location_city$city))
ui <- fluidPage(
tabsetPanel(
tabPanel(h3("Bay Area Weather by City"),
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("input city and date" ),
selectInput("city", "city_name:", c('Alameda','Atherton','Belmont','Brisbane','Burlingame',
'Daly City','Half Moon Bay','Hayward','Menlo Park','Millbrae',
'Milpitas','Oakland','Pacifica','Palo Alto','Portola Valley',
'Redwood City','San Bruno','San Carlos','San Francisco',
'San Jose','San Mateo','Santa Clara','South San Francisco')),
textInput("Date","check_date(2018 only,yyyy-mm-dd)",value = "2018-04-01"),
numericInput(inputId = "nrows", label = "head_rows", value = 3),
actionButton(inputId = "save", label = "Save"),
actionButton(inputId = "reload", label = "reload"),
actionButton(inputId = "run", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot"),
tableOutput(outputId = "table")
)
)
),
tabPanel(h3("Bay Area Weather by Selected Location"), fluid = TRUE,
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("input location, range(meter) and date(yyyy-mm-dd)" ),
numericInput(inputId = "lon", label = "Longitude", value=-122.27999878),
numericInput(inputId = "lat", label = "Latitude", value=37.52000046),
numericInput(inputId = "distance", label = "Distance(by meter)", value=4000),
textInput("Date2","check_date(2018 only,yyyy-mm-dd)",value = "2018-04-01"),
numericInput(inputId = "nrows2", label = "head_rows", value = 3),
actionButton(inputId = "save2", label = "Save"),
actionButton(inputId = "run2", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot2"),
tableOutput(outputId = "table2")
)
)
),
tabPanel(h3("Historical Weather"), fluid = TRUE,
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("Input city and date range(yyyy-mm-dd)" ),
selectInput("city3", "city_name:", c('Alameda','Atherton','Belmont','Brisbane','Burlingame',
'Daly City','Half Moon Bay','Hayward','Menlo Park','Millbrae',
'Milpitas','Oakland','Pacifica','Palo Alto','Portola Valley',
'Redwood City','San Bruno','San Carlos','San Francisco',
'San Jose','San Mateo','Santa Clara','South San Francisco')),
textInput("start_date3","start_date(2018 only,yyyy-mm-dd)",value = "2018-01-01"),
textInput("end_date3","end_date(2018 only,yyyy-mm-dd)",value = "2018-12-31"),
numericInput(inputId = "nrows3", label = "head_rows", value = 3),
actionButton(inputId = "save3", label = "Save"),
actionButton(inputId = "run3", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot3"),
tableOutput(outputId = "table3")
)
)
)
)
)
server <- function(input, output, session) {
#tab1
#data<- reactive(if (!input$reload|input$run|input$save) {x= nearby_pws_city(city_name=input$city,check_date=input$Date)} else x=read.csv("data.csv"))
data<- reactive(if (!input$reload|input$run) {
x= nearby_pws_city(city_name=input$city,check_date=input$Date)
}
else {
#session$reload()
x= read.csv("data.csv")
})
#eventReactive(if (input$reload & input$run) {session$reload()})
df <- reactive(head(data(), n = input$nrows))
output$plot <- renderPlot(expr = {
p1=plot(x = weather_map(data()))
p2=plot(x = weather_windrose(data()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table <- renderTable(expr = {
df()
})
#tab2
data2 <- reactive(x= nearby_pws_coordinates(lon=input$lon,lat=input$lat,distance=input$distance,check_date=input$Date2,data=pws))
df2 <- reactive(head(data2(), n = input$nrows2))
output$plot2 <- renderPlot(expr = {
p1=plot(x = weather_map(data2()))
p2=plot(x = weather_windrose(data2()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table2 <- renderTable(expr = {
df2()
})
#tab3
data3 <- reactive(x= history_weather(city_name =input$city3,start_date=input$start_date3,end_date=input$end_date3))
df3 <- reactive(head(data3(), n = input$nrows3))
output$plot3 <- renderPlot(expr = {
p1=plot(x = history_temp_daily(data3()))
p2=plot(x = history_temp_month(data3()))
p3=plot(x = history_humidity_daily(data3()))
p4=plot(x = history_humidity_month(data3()))
grid.arrange(p1,p2,p3,p4, nrow=2,ncol=2,heights = c(3,3))
})
output$table3 <- renderTable(expr = {
df3()
})
## Add logic so that when the "save" button is pressed, the data
## is saved to a CSV file called "data.csv" in the current
## directory.
observeEvent(eventExpr = input$save, handlerExpr = {
#write.csv(df(), file = "data.csv")
write.csv(data(), file = "data.csv")
})
observeEvent(eventExpr = input$save2, handlerExpr = {
write.csv(data2(), file = "data2.csv")
})
observeEvent(eventExpr = input$save3, handlerExpr = {
write.csv(data3(), file = "data3.csv")
})
#  observeEvent(eventExpr = input$reload, handlerExpr = {
#    data=read.csv("data.csv")
#    print("REFRESHING CSV!")
#    p1=plot(x = weather_map(data()))
#    p2=plot(x = weather_windrose(data()))
#  })
}
shinyApp(ui = ui, server = server)
library(shiny)
library(gridExtra)
#location_city<-readRDS("location_city.rda")
#weather_pws<-readRDS("weather_pws.rda")
#pws<-readRDS("pws.rda")
source("get_map.R")
source("distm_function.R")
source("wind_rose_plot.R")
#city_lst=list(unique(location_city$city))
ui <- fluidPage(
tabsetPanel(
tabPanel(h3("Bay Area Weather by City"),
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("input city and date" ),
selectInput("city", "city_name:", c('Alameda','Atherton','Belmont','Brisbane','Burlingame',
'Daly City','Half Moon Bay','Hayward','Menlo Park','Millbrae',
'Milpitas','Oakland','Pacifica','Palo Alto','Portola Valley',
'Redwood City','San Bruno','San Carlos','San Francisco',
'San Jose','San Mateo','Santa Clara','South San Francisco')),
textInput("Date","check_date(2018 only,yyyy-mm-dd)",value = "2018-04-01"),
numericInput(inputId = "nrows", label = "head_rows", value = 3),
actionButton(inputId = "save", label = "Save"),
actionButton(inputId = "reload", label = "reload"),
actionButton(inputId = "run", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot"),
tableOutput(outputId = "table")
)
)
),
tabPanel(h3("Bay Area Weather by Selected Location"), fluid = TRUE,
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("input location, range(meter) and date(yyyy-mm-dd)" ),
numericInput(inputId = "lon", label = "Longitude", value=-122.27999878),
numericInput(inputId = "lat", label = "Latitude", value=37.52000046),
numericInput(inputId = "distance", label = "Distance(by meter)", value=4000),
textInput("Date2","check_date(2018 only,yyyy-mm-dd)",value = "2018-04-01"),
numericInput(inputId = "nrows2", label = "head_rows", value = 3),
actionButton(inputId = "save2", label = "Save"),
actionButton(inputId = "run2", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot2"),
tableOutput(outputId = "table2")
)
)
),
tabPanel(h3("Historical Weather"), fluid = TRUE,
sidebarLayout(
sidebarPanel = sidebarPanel(
helpText("Input city and date range(yyyy-mm-dd)" ),
selectInput("city3", "city_name:", c('Alameda','Atherton','Belmont','Brisbane','Burlingame',
'Daly City','Half Moon Bay','Hayward','Menlo Park','Millbrae',
'Milpitas','Oakland','Pacifica','Palo Alto','Portola Valley',
'Redwood City','San Bruno','San Carlos','San Francisco',
'San Jose','San Mateo','Santa Clara','South San Francisco')),
textInput("start_date3","start_date(2018 only,yyyy-mm-dd)",value = "2018-01-01"),
textInput("end_date3","end_date(2018 only,yyyy-mm-dd)",value = "2018-12-31"),
numericInput(inputId = "nrows3", label = "head_rows", value = 3),
actionButton(inputId = "save3", label = "Save"),
actionButton(inputId = "run3", label = "run")
),
mainPanel = mainPanel(
plotOutput(outputId = "plot3"),
tableOutput(outputId = "table3")
)
)
)
)
)
server <- function(input, output, session) {
#tab1
#data<- reactive(if (!input$reload|input$run|input$save) {x= nearby_pws_city(city_name=input$city,check_date=input$Date)} else x=read.csv("data.csv"))
data<- reactive(if (!input$reload|input$run) {
x= nearby_pws_city(city_name=input$city,check_date=input$Date)
}
else {
#session$reload()
x= read.csv("data.csv")
})
#eventReactive(if (input$reload & input$run) {session$reload()})
df <- reactive(head(data(), n = input$nrows))
output$plot <- renderPlot(expr = {
p1=plot(x = weather_map(data()))
p2=plot(x = weather_windrose(data()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table <- renderTable(expr = {
df()
})
#tab2
data2 <- reactive(x= nearby_pws_coordinates(lon=input$lon,lat=input$lat,distance=input$distance,check_date=input$Date2,data=pws))
df2 <- reactive(head(data2(), n = input$nrows2))
output$plot2 <- renderPlot(expr = {
p1=plot(x = weather_map(data2()))
p2=plot(x = weather_windrose(data2()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table2 <- renderTable(expr = {
df2()
})
#tab3
data3 <- reactive(x= history_weather(city_name =input$city3,start_date=input$start_date3,end_date=input$end_date3))
df3 <- reactive(head(data3(), n = input$nrows3))
output$plot3 <- renderPlot(expr = {
p1=plot(x = history_temp_daily(data3()))
p2=plot(x = history_temp_month(data3()))
p3=plot(x = history_humidity_daily(data3()))
p4=plot(x = history_humidity_month(data3()))
grid.arrange(p1,p2,p3,p4, nrow=2,ncol=2,heights = c(3,3))
})
output$table3 <- renderTable(expr = {
df3()
})
## Add logic so that when the "save" button is pressed, the data
## is saved to a CSV file called "data.csv" in the current
## directory.
observeEvent(eventExpr = input$save, handlerExpr = {
#write.csv(df(), file = "data.csv")
write.csv(data(), file = "data.csv")
})
observeEvent(eventExpr = input$save2, handlerExpr = {
write.csv(data2(), file = "data2.csv")
})
observeEvent(eventExpr = input$save3, handlerExpr = {
write.csv(data3(), file = "data3.csv")
})
#  observeEvent(eventExpr = input$reload, handlerExpr = {
#    data=read.csv("data.csv")
#    print("REFRESHING CSV!")
#    p1=plot(x = weather_map(data()))
#    p2=plot(x = weather_windrose(data()))
#  })
}
shinyApp(ui = ui, server = server)
dplyrr::group_by()
library(dplyr)
importFrom(dplyr,"group_by")
import group_by from dplyr
dplyrr::group_by()
setwd("~/GitHub/stats290-final-project")
usethis::create_package('stat290_finalproject')
usethis::create_package("stat290_final_project")
library(usethis)
usethis::create_package("stat290_final_project")
usethis::create_package("stat290.finalproject")
use_vignette("weather_vignette")
use_vignette("weather_vignette")
use_vignette("weather_vignette")
setwd("~/GitHub/stats290-final-project/stat290.finalproject")
use_vignette("weather_vignette")
setwd("~/GitHub/stats290-final-project/stat290.finalproject")
load("airport")
setwd("~/GitHub/stats290-final-project/stat290.finalproject/data")
load("airport")
read("airport.rda")
readRDS("airport.rda")
load("C:/Users/Kitty/Documents/GitHub/stats290-final-project/stat290.finalproject/data/airport.rda")
saveRDS(airport,"airport.rda")
saveRDS(airport,"airport.rda")
airport
load("C:/Users/Kitty/Documents/GitHub/stats290-final-project/stat290.finalproject/data/airport.rda")
load("C:/Users/Kitty/Desktop/all/290/airport.rda")
load("C:/Users/Kitty/Desktop/all/290/airport.rda")
load("C:/Users/Kitty/Desktop/all/290/airport.rda")
setwd("~/GitHub/stats290-final-project/stat290.finalproject")
load("~/GitHub/stats290-final-project/stat290.finalproject/data/location_city.rda")
load("~/GitHub/stats290-final-project/stat290.finalproject/location_city.rda")
setwd("~/GitHub/stats290-final-project/stat290.finalproject/R")
setwd("~/GitHub/stats290-final-project/stat290.finalproject/data")
load("~/GitHub/stats290-final-project/stat290.finalproject/data/location_city.rda")
devtools::load_all("~/GitHub/stats290-final-project/stat290.finalproject")
setwd("~/GitHub/stats290-final-project/stat290.finalproject")
devtools::load_all(".")
setwd("C:/Users/Kitty/Desktop/all/290")
load("location_city.rda")
get_wd()
getwd()
setwd("C:/Users/Kitty/Desktop/all/290")
location_city<-readRDS("location_city.rda")
location_city
location_city
use_data("location_city.rda")
usethis::use_data("location_city.rda")
get_wd()
getwd()
setwd("~/GitHub/stats290-final-project/stat290.finalproject")
setwd("~/GitHub/stats290-final-project/stat290.finalproject/data")
saveRDS(location_city,"location_city.rda")
usethis::use_data("location_city.rda")
setwd("~/GitHub/stats290-final-project/stat290.finalproject")
usethis::use_data("location_city.rda")
usethis::use_data("location_city.rda")
saveRDS(location_city,"location_city.rda")
usethis::use_data("location_city.rda")
library(readr)
setwd()
dir()
getwd
getwd()
use_data("location_city.rda")
setwd("~/GitHub/stats290-final-project/stat290.finalproject/data")
use_data("location_city.rda")
use_data("location_city.rda")
use_data("location_city.rda")
setwd("~/GitHub/stats290-final-project/stat290.finalproject")
use_data("location_city.rda")
usethis::use_data("location_city.rda")
usethis::use_data("location_city")
setwd("~/GitHub/stats290-final-project/stat290.finalproject/data")
usethis::use_data("location_city")
usethis::use_data(location_city)
usethis::use_data(location_city)
usethis::use_data(location_city,overwrite = TRUE)
location_city
getwd()
readRDS(location_city)
readRDS("location_city")
readRDS("C:/Users/Kitty/Documents/GitHub/stats290-final-project/stat290.finalproject/data/location_city")
readRDS("C:/Users/Kitty/Documents/GitHub/stats290-final-project/stat290.finalproject/data/location_city.rda")
usethis::use_data(location_city)
readRDS("C:/Users/Kitty/Documents/GitHub/stats290-final-project/stat290.finalproject/data/location_city.rda")
readRDS("location_city.rda")
setwd("~/GitHub/stats290-final-project/stat290.finalproject")
use_data("location_city.rda")
library(usethis)
usethis::use_data("location_city.rda")
usethis::use_data(location_city)
usethis::use_data(location_city)
usethis::use_data(location_city)
usethis::use_data("location_city")
usethis::use_data("location_city.rda")
usethis::use_data(location_city.rda)
usethis::use_data(location_city)
usethis::use_data(location_city)
location_city<-readRDS("location_city.rda")
location_city<-readRDS("location_city.rda")
usethis::use_data(location_city)
getwd()
weather_pws<-readRDS("weather_pws.rda")
pws<-readRDS("pws.rda")
weather_pws<-readRDS("weather_pws.rda")
pws<-readRDS("pws.rda")
airport<-readRDS("airport.rda")
weather_airport<-readRDS("weather_airport.rda")
usethis::use_data("weather_pws.rda")
usethis::use_data("pws.rda")
usethis::use_data("airport.rda")
usethis::use_data("weather_airport.rda")
location_city<-readRDS("location_city.rda")
weather_pws<-readRDS("weather_pws.rda")
pws<-readRDS("pws.rda")
airport<-readRDS("airport.rda")
weather_airport<-readRDS("weather_airport.rda")
usethis::use_data(location_city)
usethis::use_data(weather_pws)
usethis::use_data(pws)
usethis::use_data(airport)
usethis::use_data(weather_airport)
devtools::load_all(".")
