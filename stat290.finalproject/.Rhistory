#'
#' @keywords Shiny Interface
server <- function(input, output, session) {
#tab1
#data<- reactive(if (!input$reload|input$run|input$save) {x= nearby_pws_city(city_name=input$city,check_date=input$Date)} else x=read.csv("data.csv"))
data<- reactive(if (!input$reload|input$run) {
x= nearby_pws_city(city_name=input$city,check_date=input$Date)
}
else {
#session$reload()
x= read.csv("data.csv")
})
#eventReactive(if (input$reload & input$run) {session$reload()})
df <- reactive(head(data(), n = input$nrows))
output$plot <- renderPlot(expr = {
p1=plot(x = weather_map(data()))
p2=plot(x = weather_windrose(data()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table <- renderTable(expr = {
df()
})
#tab2
data2 <- reactive(x= nearby_pws_coordinates(lon=input$lon,lat=input$lat,distance=input$distance,check_date=input$Date2,data=pws))
df2 <- reactive(head(data2(), n = input$nrows2))
output$plot2 <- renderPlot(expr = {
p1=plot(x = weather_map(data2()))
p2=plot(x = weather_windrose(data2()))
grid.arrange(p1,p2, ncol=2,widths = c(2,2))
})
output$table2 <- renderTable(expr = {
df2()
})
#tab3
data3 <- reactive(x= history_weather(city_name =input$city3,start_date=input$start_date3,end_date=input$end_date3))
df3 <- reactive(head(data3(), n = input$nrows3))
output$plot3 <- renderPlot(expr = {
p1=plot(x = history_temp_daily(data3()))
p2=plot(x = history_temp_month(data3()))
p3=plot(x = history_humidity_daily(data3()))
p4=plot(x = history_humidity_month(data3()))
grid.arrange(p1,p2,p3,p4, nrow=2,ncol=2,heights = c(3,3))
})
output$table3 <- renderTable(expr = {
df3()
})
## Add logic so that when the "save" button is pressed, the data
## is saved to a CSV file called "data.csv" in the current
## directory.
observeEvent(eventExpr = input$save, handlerExpr = {
#write.csv(df(), file = "data.csv")
write.csv(data(), file = "data.csv")
})
observeEvent(eventExpr = input$save2, handlerExpr = {
write.csv(data2(), file = "data2.csv")
})
observeEvent(eventExpr = input$save3, handlerExpr = {
write.csv(data3(), file = "data3.csv")
})
#  observeEvent(eventExpr = input$reload, handlerExpr = {
#    data=read.csv("data.csv")
#    print("REFRESHING CSV!")
#    p1=plot(x = weather_map(data()))
#    p2=plot(x = weather_windrose(data()))
#  })
}
runWeatherUI()
library(stat290.finalproject)
#' @return shiny UI
#' run shiny UI as below:
runWeatherUI()
#' @return shiny UI
#' run shiny UI as below:
library(ggplot2)
library(gridExtra)
library(ggmap)
runWeatherUI()
library(stat290.finalproject)
library(stat290.finalproject)
runWeatherUI()
library(stat290.finalproject)
runWeatherUI()
library(gridExtra)
runWeatherUI()
library(ggplot2)
library(ggplot2)
runWeatherUI()
library(ggmap)
runWeatherUI()
devtools::use_vignette("weather_vignette")
unlink('vignettes/weather_vignette_cache', recursive = TRUE)
devtools::use_vignette("weather_vignette")
sprintf("%X", as.integer(charToRaw("£")))
sprintf("%X", as.integer(charToRaw("°")))
# loading the required packages
library(ggplot2)
library(ggmap)
library(akima)
# loading data
#location_city<-readRDS("location_city.rda")
#weather_pws<-readRDS("weather_pws.rda")
#pws<-readRDS("pws.rda")
#create temperature map
weather_map <- function(df=pws_id_selected) {
#create contour line
surface <- with(df, interp(lon, lat, temp, linear = FALSE))
srfc <- expand.grid(lon = surface$x, lat = surface$y)
srfc$temp <- as.vector(surface$z)
tconts <- geom_contour(aes(x = lon, y = lat, z = temp), data = srfc, na.rm = TRUE)
# getting the map
wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
maptype =  "terrain-background", scale = 2)
#wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
#                  maptype =  "terrain-labels", scale = 2)
# plotting the map with some points on it
ggmap(wu_map) +
geom_point(data = df, aes(x = df$lon, y = df$lat, fill = "blue", alpha = 0.8), size = 3, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)+  geom_text(data = df, aes(x = df$lon, y = df$lat, label = paste(df$temp,"\u00B0","C")), size = 3, vjust = 0, hjust = -0.5) +
labs(title = paste0("Bay Area Weather - ",unique(df$location_city)," (",unique(df$date),")"), x = "Lon", y = "Lat", color = "Tempature\n", size = 2,fill = "blue") +
#stat_density2d(data=df,aes(x=df$lon,y=df$lat,z=df$temp))
tconts ##add contour line
}
#weather_map(df=pws_id_selected)
#weather_map(df=)
weather_map(df=pws_id_selected)
?weather_map
#' List all PWS nearby the city selected
#'
#' @description given a city name in Bay area, select all PWS with weather data in history
#' @export
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr filter select inner_join
#'
#' @param nearby_pws_city funcation name
#' @param city_name parameter
#' @param check_date parameter
#'
#'
#' @examples
#' \dontrun{
#' pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
#' }
#' @keywords nearby_pws_city
#'
## @@function nearby_pws_city
## @@input city name
## @@return nearby psw id list
nearby_pws_city <- function(city_name="Belmont", check_date="2018-05-05") {
pws %>%
filter(location_city==city_name) %>%
select(location_city,id,lon,lat) %>%
unique() %>%
inner_join(weather_pws,by=c("id"="pws_id")) %>%
select(location_city,id,lon,lat,temp,humidity,wind_dir,wind_dir_degrees,wind_speed,date) %>%
filter(date==check_date)->
pws_id_selected
return(pws_id_selected)
}
weather_map(df=pws_id_selected)
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
pws<-readRDS("pws.rda")
load("C:/Users/Kitty/Documents/GitHub/stats290-final-project/stat290.finalproject/data/pws.rda")
pws<-readRDS("pws.rda")
pws
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
pws
pws$location_city
load("C:/Users/Kitty/Documents/GitHub/stats290-final-project/stat290.finalproject/data/location_city.rda")
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
#' List all PWS nearby the city selected
#'
#' @description given a city name in Bay area, select all PWS with weather data in history
#' @export
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr filter select inner_join
#'
#' @param nearby_pws_city funcation name
#' @param city_name parameter
#' @param check_date parameter
#'
#'
#' @examples
#' \dontrun{
#' pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
#' }
#' @keywords nearby_pws_city
#'
## @@function nearby_pws_city
## @@input city name
## @@return nearby psw id list
nearby_pws_city <- function(city_name="Belmont", check_date="2018-05-05") {
pws %>%
filter(location_city==city_name) %>%
select(location_city,id,lon,lat) %>%
unique() %>%
inner_join(weather_pws,by=c("id"="pws_id")) %>%
select(location_city,id,lon,lat,temp,humidity,wind_dir,wind_dir_degrees,wind_speed,date) %>%
filter(date==check_date)->
pws_id_selected
return(pws_id_selected)
}
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
library(stat290.finalproject)
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
stat290.finalproject::nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
pws_id_selected <- stat290.finalproject::nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
# loading the required packages
library(ggplot2)
library(ggmap)
library(akima)
# loading data
#location_city<-readRDS("location_city.rda")
#weather_pws<-readRDS("weather_pws.rda")
#pws<-readRDS("pws.rda")
#create temperature map
weather_map <- function(df=pws_id_selected) {
#create contour line
surface <- with(df, interp(lon, lat, temp, linear = FALSE))
srfc <- expand.grid(lon = surface$x, lat = surface$y)
srfc$temp <- as.vector(surface$z)
tconts <- geom_contour(aes(x = lon, y = lat, z = temp), data = srfc, na.rm = TRUE)
# getting the map
wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
maptype =  "terrain-background", scale = 2)
#wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
#                  maptype =  "terrain-labels", scale = 2)
# plotting the map with some points on it
ggmap(wu_map) +
geom_point(data = df, aes(x = df$lon, y = df$lat, fill = "blue", alpha = 0.8), size = 3, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)+  geom_text(data = df, aes(x = df$lon, y = df$lat, label = paste(df$temp,"\u00B0","C")), size = 3, vjust = 0, hjust = -0.5) +
labs(title = paste0("Bay Area Weather - ",unique(df$location_city)," (",unique(df$date),")"), x = "Lon", y = "Lat", color = "Tempature\n", size = 2,fill = "blue") +
#stat_density2d(data=df,aes(x=df$lon,y=df$lat,z=df$temp))
tconts ##add contour line
}
#weather_map(df=pws_id_selected)
#weather_map(df=)
weather_map(df=pws_id_selected)
# loading the required packages
library(ggplot2)
library(ggmap)
library(akima)
# loading data
#location_city<-readRDS("location_city.rda")
#weather_pws<-readRDS("weather_pws.rda")
#pws<-readRDS("pws.rda")
#create temperature map
weather_map <- function(df=pws_id_selected) {
#create contour line
surface <- with(df, interp(lon, lat, temp, linear = FALSE))
srfc <- expand.grid(lon = surface$x, lat = surface$y)
srfc$temp <- as.vector(surface$z)
tconts <- geom_contour(aes(x = lon, y = lat, z = temp), data = srfc, na.rm = TRUE)
# getting the map
wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
maptype =  "terrain-background", scale = 2)
#wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
#                  maptype =  "terrain-labels", scale = 2)
# plotting the map with some points on it
ggmap(wu_map) +
geom_point(data = df, aes(x = df$lon, y = df$lat, fill = "blue", alpha = 0.8), size = 3, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)+  geom_text(data = df, aes(x = df$lon, y = df$lat, label = paste(df$temp,"\u00B0C")), size = 3, vjust = 0, hjust = -0.5) +
labs(title = paste0("Bay Area Weather - ",unique(df$location_city)," (",unique(df$date),")"), x = "Lon", y = "Lat", color = "Tempature\n", size = 2,fill = "blue") +
#stat_density2d(data=df,aes(x=df$lon,y=df$lat,z=df$temp))
tconts ##add contour line
}
#weather_map(df=pws_id_selected)
#weather_map(df=)
weather_map(df=pws_id_selected)
# loading the required packages
library(ggplot2)
library(ggmap)
library(akima)
# loading data
#location_city<-readRDS("location_city.rda")
#weather_pws<-readRDS("weather_pws.rda")
#pws<-readRDS("pws.rda")
#create temperature map
weather_map <- function(df=pws_id_selected) {
#create contour line
surface <- with(df, interp(lon, lat, temp, linear = FALSE))
srfc <- expand.grid(lon = surface$x, lat = surface$y)
srfc$temp <- as.vector(surface$z)
tconts <- geom_contour(aes(x = lon, y = lat, z = temp), data = srfc, na.rm = TRUE)
# getting the map
wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
maptype =  "terrain-background", scale = 2)
#wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
#                  maptype =  "terrain-labels", scale = 2)
# plotting the map with some points on it
ggmap(wu_map) +
geom_point(data = df, aes(x = df$lon, y = df$lat, fill = "blue", alpha = 0.8), size = 3, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)+  geom_text(data = df, aes(x = df$lon, y = df$lat, label = paste(df$temp,"\u00B0D")), size = 3, vjust = 0, hjust = -0.5) +
labs(title = paste0("Bay Area Weather - ",unique(df$location_city)," (",unique(df$date),")"), x = "Lon", y = "Lat", color = "Tempature\n", size = 2,fill = "blue") +
#stat_density2d(data=df,aes(x=df$lon,y=df$lat,z=df$temp))
tconts ##add contour line
}
#weather_map(df=pws_id_selected)
#weather_map(df=)
weather_map(df=pws_id_selected)
# loading the required packages
library(ggplot2)
library(ggmap)
library(akima)
# loading data
#location_city<-readRDS("location_city.rda")
#weather_pws<-readRDS("weather_pws.rda")
#pws<-readRDS("pws.rda")
#create temperature map
weather_map <- function(df=pws_id_selected) {
#create contour line
surface <- with(df, interp(lon, lat, temp, linear = FALSE))
srfc <- expand.grid(lon = surface$x, lat = surface$y)
srfc$temp <- as.vector(surface$z)
tconts <- geom_contour(aes(x = lon, y = lat, z = temp), data = srfc, na.rm = TRUE)
# getting the map
wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
maptype =  "terrain-background", scale = 2)
#wu_map <- get_map(location = c(lon = mean(df$lon), lat = mean(df$lat)), zoom = 14,
#                  maptype =  "terrain-labels", scale = 2)
# plotting the map with some points on it
ggmap(wu_map) +
geom_point(data = df, aes(x = df$lon, y = df$lat, fill = "blue", alpha = 0.8), size = 3, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)+  geom_text(data = df, aes(x = df$lon, y = df$lat, label = paste(df$temp,"\u00A3C")), size = 3, vjust = 0, hjust = -0.5) +
labs(title = paste0("Bay Area Weather - ",unique(df$location_city)," (",unique(df$date),")"), x = "Lon", y = "Lat", color = "Tempature\n", size = 2,fill = "blue") +
#stat_density2d(data=df,aes(x=df$lon,y=df$lat,z=df$temp))
tconts ##add contour line
}
#weather_map(df=pws_id_selected)
#weather_map(df=)
weather_map(df=pws_id_selected)
sprintf("%X", as.integer(charToRaw("°")))
library(stat290.finalproject)
library(stat290.finalproject)
#' @return run package
library(stat290.finalproject)
#' run shiny UI as below:
#' runWeatherUI()
#' @return a table of historical weather for selected city
#' ?history_weather
c="Alameda"
d1="2018-06-01"
d2="2018-12-31"
history_weather_tbl=history_weather(city_name = c,start_date=d1,end_date=d2)
history_weather_tbl[1:3,]
#' @return a table of historical weather of nearby stations(PWS) based on selected city
#' ?nearby_pws_city
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
#' @return a table of historical weather of nearby stations(PWS) based on location (lon,lat and distance(meter))
#' ?nearby_pws_coordinates
l1=-122.27999878
l2=37.52000046
dis=4000
d="2018-05-05"
pws_id_selected=nearby_pws_coordinates(lon=l1,lat=l2,distance = dis,data=pws,check_date = d)
pws_id_selected[1:3,]
#' @return a map of historical weather for selected PWS list or city
#' ?weather_map
library(ggplot2)
library(ggmap)
library(akima)
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
#' @return a chart of historical daily tempature with mean, max and min values
#' ?history_temp_daily
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_temp_daily(df=history_weather_tbl)
#' @return a chart of historical month tempature with mean, max and min values
#' ?history_temp_month
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_temp_month(df=history_weather_tbl)
#' @return a chart of historical daily humidity with mean, max and min values
#' ?history_humidity_daily
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_humidity_daily(df=history_weather_tbl)
#' @return a chart of historical monthly humidity with mean, max and min values
#' ?history_humidity_month
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_humidity_month(df=history_weather_tbl)
#' @return a wind rose
#' ?weather_windrose
df=history_weather(city_name = "Alameda",start_date="2018-06-01",end_date="2018-12-31")
weather_windrose(data = df, spd = "wind_speed", dir = "wind_dir_degrees")
#' @return a table of historical weather of nearby stations(PWS) based on selected city
#' ?nearby_pws_city
library(dbplyr)
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
#' @return a table of historical weather of nearby stations(PWS) based on selected city
#' ?nearby_pws_city
library(magrittr)
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
#' List all PWS nearby the city selected
#'
#' @description given a city name in Bay area, select all PWS with weather data in history
#' @export
#'
#' @importFrom magrittr %>%
#' @importFrom dplyr filter select inner_join
#'
#' @param nearby_pws_city funcation name
#' @param city_name parameter
#' @param check_date parameter
#'
#'
#' @examples
#' \dontrun{
#' pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
#' }
#' @keywords nearby_pws_city
#'
## @@function nearby_pws_city
## @@input city name
## @@return nearby psw id list
nearby_pws_city <- function(city_name="Belmont", check_date="2018-05-05") {
pws %>%
filter(location_city==city_name) %>%
select(location_city,id,lon,lat) %>%
unique() %>%
inner_join(weather_pws,by=c("id"="pws_id")) %>%
select(location_city,id,lon,lat,temp,humidity,wind_dir,wind_dir_degrees,wind_speed,date) %>%
filter(date==check_date)->
pws_id_selected
return(pws_id_selected)
}
#' @return a map of historical weather for selected PWS list or city
#' ?weather_map
library(ggplot2)
library(ggmap)
library(akima)
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
#' @return run package
library(stat290.finalproject)
#' run shiny UI as below:
#' runWeatherUI()
#' @return a table of historical weather for selected city
#' ?history_weather
c="Alameda"
d1="2018-06-01"
d2="2018-12-31"
history_weather_tbl=history_weather(city_name = c,start_date=d1,end_date=d2)
history_weather_tbl[1:3,]
#' @return a table of historical weather of nearby stations(PWS) based on selected city
#' ?nearby_pws_city
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
pws_id_selected[1:3,]
#' @return a table of historical weather of nearby stations(PWS) based on location (lon,lat and distance(meter))
#' ?nearby_pws_coordinates
l1=-122.27999878
l2=37.52000046
dis=4000
d="2018-05-05"
pws_id_selected=nearby_pws_coordinates(lon=l1,lat=l2,distance = dis,data=pws,check_date = d)
pws_id_selected[1:3,]
#' @return a map of historical weather for selected PWS list or city
#' ?weather_map
library(ggplot2)
library(ggmap)
library(akima)
pws_id_selected <- nearby_pws_city(city_name = "Alameda",check_date="2018-05-05")
weather_map(df=pws_id_selected)
pws_id_selected <- nearby_pws_city(city_name = "Belmont",check_date="2018-05-05")
weather_map(df=pws_id_selected)
#' @return a chart of historical daily tempature with mean, max and min values
#' ?history_temp_daily
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_temp_daily(df=history_weather_tbl)
#' @return a chart of historical month tempature with mean, max and min values
#' ?history_temp_month
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_temp_month(df=history_weather_tbl)
#' @return a chart of historical daily humidity with mean, max and min values
#' ?history_humidity_daily
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_humidity_daily(df=history_weather_tbl)
#' @return a chart of historical monthly humidity with mean, max and min values
#' ?history_humidity_month
d1="2018-06-01"
d2="2018-12-31"
city="Alameda"
history_weather_tbl=history_weather(city_name = city,start_date=d1,end_date=d2)
history_humidity_month(df=history_weather_tbl)
#' @return a wind rose
#' ?weather_windrose
df=history_weather(city_name = "Alameda",start_date="2018-06-01",end_date="2018-12-31")
weather_windrose(data = df, spd = "wind_speed", dir = "wind_dir_degrees")
library(stat290.finalproject)
stat290.finalproject::runWeatherUI()
?runWeatherUI()
library(ggmap)
library(gridExtra)
stat290.finalproject::runWeatherUI()
